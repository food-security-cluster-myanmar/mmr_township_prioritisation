---
title: "Initial observations on the 2021 Myanmar Food Security Cluster 5Ws"
author: "Myanmar Food Security Cluster"
date: "04/02/2022"
output:
  html_document:
    code_download: yes
    theme: readable
    toc: yes
    toc_depth: 4
    toc_float: yes
    number_sections: no
    collapsed: no
always_allow_html: yes
---

```{css, echo=FALSE}

#TOC::before {
  content: "";
  display: block;
  height: 70px;
  margin: 2em 20px 40px 20px;
  background-image: url("Myanmar_cluster_blue.png");
  background-size: contain;
  background-position: center center;
  background-repeat: no-repeat;
}
```

```{=html}
<style>
    body .main-container {
        max-width: 1280px;
    }
</style>
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)


theme_set(theme_light())

# disabling scientific notation
options(scipen = 100)

# pander tables all in one row
panderOptions('table.split.table', Inf)

# pander thousands separator
panderOptions("big.mark", ",")

# replace 
opts <- options(knitr.kable.NA = "")

`%out%` <- Negate(`%in%`)

# function for transposing df
transpose_df <- function(df) {
  t_df <- data.table::transpose(df)
  colnames(t_df) <- rownames(df)
  rownames(t_df) <- colnames(df)
  t_df <- t_df %>%
    tibble::rownames_to_column(.data = .) %>%
    tibble::as_tibble(.)
  return(t_df)
}

# function beneficiary summaries
sum_ben <- function(df, column_var){
  
  column_var <- enquo(column_var)
  
  df %>%
    group_by(!!column_var) %>% # must add bang-bang
    summarise(beneficiaries = sum(beneficiaries)) %>% 
    arrange(desc(beneficiaries))
    
}

# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
  
  column_var1 <- enquo(column_var1)
  column_var2 <- enquo(column_var2)
  
  df %>%
    group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
    summarise(beneficiaries = sum(beneficiaries)) %>% 
    arrange(desc(beneficiaries))
    
}

# scaling functions 
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}

#mode function 
mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

codes <- read_csv("Myanmar humanitarian partner list.csv") %>% clean_names()
```

```{r}
pcode4 <- read_excel("2022_FSCMYA_5W_template_Q1 2022_IM Combined_25042022.xlsx", 
           sheet = "GEOADMINS") %>% 
  clean_names() %>% 
  select(admin1pcode_9:admin1_3) %>% 
  rename(admin1_pcode = admin1pcode_9,
         state = state_10, 
         township = township_11,
         admin3_pcode = admin3pcode_12, 
         vt_town = vt_and_town_13, 
         admin4_pcode = vt_and_town_pcode_14)
 
villages <- read_excel("2022_FSCMYA_5W_template_Q1 2022_IM Combined_25042022.xlsx", 
           sheet = "GEOADMINS") %>% 
  clean_names() %>%
  select(admin1pcode_17:location_type) %>% 
  rename(admin1_pcode = admin1pcode_17,
         state = state_18, 
         township = township_19,
         admin3_pcode = admin3pcode_20, 
         vt_town = vt_and_town_21, 
         admin4_pcode = vt_and_town_pcode_22)

camps <- read_excel("2022_FSCMYA_5W_template_Q1 2022_IM Combined_25042022.xlsx", 
           sheet = "GEOADMINS") %>% 
  clean_names() %>%
  select(township = township_29, camp_name, pcode_camp = p_code_camp)

industrial_zones <- read_excel("2022_FSCMYA_5W_template_Q1 2022_IM Combined_25042022.xlsx", 
           sheet = "GEOADMINS") %>% 
  clean_names() %>% 
  select(state = state_36, admin1_pcode = admin1pcode_37, industrial_zone = industrial_zones)



```

### reading in fsc 

```{r}
fsc2 <- read_excel("C:/Users/seany/Downloads/R/not_for_sharing/2022_FSCMYA_5W_template_Q1 2022_IM Combined_draft_27042022_.xlsx", 
           sheet = "FSC 5W Activities", skip = 4) %>% 
  clean_names() %>%
  filter(!is.na(month_of_implementation)) %>% 
  rename_all(~str_replace_all(., "^number_of_", "")) %>%
  rename_all(~str_replace_all(., "^number_", "")) %>%
  rename(specify_location = specify_location_if_the_the_location_is_not_in_the_list) %>% 
  mutate(idp_camp_site_name= as.character(idp_camp_site_name)) %>% 
  mutate(location = case_when(!is.na(idp_camp_site_name) ~ idp_camp_site_name,
                              !is.na(village_ward) ~ village_ward,
                              !is.na(specify_location) ~ specify_location,
                              !is.na(village_tract_town) ~ village_tract_town)) %>%
  mutate(date = my(month_of_implementation)) %>% 
  rename(activity = fsc_main_activity) %>% 
  mutate(township = recode(township, "Putao" = "Puta-O"), 
         admin3_pcode = ifelse(township == "Puta-O", "MMR001014", admin3_pcode)) %>% 
  left_join(pcode4 %>% select(township, vt_town, admin3_pcode, admin4_pcode, admin1_pcode), by = 
              c("village_tract_town" = "vt_town", "township" = "township", 
                "admin3_pcode" = "admin3_pcode", "admin1_pcode" = "admin1_pcode")) %>% 
  mutate(total_value_usd = case_when(currency == "MMK" ~ total_value / 1776, 
                                     currency == "USD" ~ total_value)) %>% 
  rename(state = state_region) %>% 
  mutate(admin3_pcode_old = case_when(admin3_pcode %in% c("MMR013046", "MMR013047") ~ "MMR013008", 
                                  admin3_pcode == "MMR015202" ~ "MMR015022",
                                  admin3_pcode == "MMR015315" ~ "MMR015010", 
                                  admin3_pcode == "MMR015312" ~ "MMR015006",	
                                  admin3_pcode == "MMR015308" ~ "MMR015007",
                                  admin3_pcode == "MMR016321" ~ "MMR016003", 
                                  TRUE ~ admin3_pcode)) %>% 
  # removing a duplicate entry from the left join 
  mutate(drop = case_when(admin4_pcode == "MMR007008058" ~ 1, TRUE ~ 0)) %>%
  filter(drop != 1) %>% select(-drop) %>%
  rename(response_plan = response_plan_if_project_under_fts, 
         beneficiaries = reached_beneficiaries, 
         households = reached_households) %>% 
  replace_na(list(new_beneficiaries = 0)) %>% 
  mutate(activity_red = case_when(activity %in% c("food distributions (in kind/voucher/cash), moderate", 
                                                  "food distributions (in kind/voucher/cash), severe") ~ 
                                    "food distribution",
                                  activity %in% c("multi-purpose cash transfer (MPC), moderate",
                                                  "multi-purpose cash transfer (MPC), severe") ~ 
                                    "multi-purpose cash transfer",
                                  activity == "livelihoods vocational training" ~ "vocational training",
                                  activity == "food/cash for work/assets" ~ "food_cash for work_assets",
                                  activity == "income-generating activities and small grants" ~ "IGA and small grants", 
                                  TRUE ~ activity), 
         activity_red = str_remove_all(activity_red, "provision of ")) %>%
  mutate(strat_obj = case_when(activity_red %in% c("food distribution", "multi-purpose cash transfer") &
                                 beneficiary_type == "Internally Displaced" ~ 
                          "so_1", 
                        activity_red %in% c("food distribution", "multi-purpose cash transfer") & 
                          beneficiary_type != "Internally Displaced" ~ 
                          "so_2", 
                        TRUE ~ "so_3")) %>% 
   # these partners did not provide the numbers of households
  mutate(households = ifelse(is.na(households), beneficiaries, households)) %>% 
  mutate(usd_per_hhd = total_value_usd / households, 
         usd_per_person = total_value_usd / beneficiaries) %>% 
  mutate(usd_hhd_bin = case_when(usd_per_hhd < 10 ~ "<$10",
                     usd_per_hhd >= 10 & usd_per_hhd < 20 ~ ">=$10_<$20",
                     usd_per_hhd >= 20 & usd_per_hhd < 30 ~ ">=$20_<$30",
                     usd_per_hhd >= 30 & usd_per_hhd < 40 ~ ">=$30_<$40",
                     usd_per_hhd >= 40 & usd_per_hhd < 50 ~ ">=$40_<$50",
                     usd_per_hhd >= 50 & usd_per_hhd < 60 ~ ">=$50_<$60",
                     usd_per_hhd >= 60 & usd_per_hhd < 70 ~ ">=$60_<$70",
                     usd_per_hhd >= 70 & usd_per_hhd < 80 ~ ">=$70_<$80",
                     usd_per_hhd >= 80 & usd_per_hhd < 90 ~ ">=$80_<$90",
                     usd_per_hhd >= 90 & usd_per_hhd < 100 ~ ">=$90_<$100",
                     usd_per_hhd >= 100 ~ ">=$100",
                     TRUE ~ NA_character_),
         usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$30", ">=$30_<$40", ">=$40_<$50",">=$50_<$60", 
                                                  ">=$60_<$70", ">=$70_<$80", ">=$80_<$90",">=$90_<$100",">=$100"))) %>% 
  mutate(usd_person_bin = case_when(usd_per_person < 2 ~ "<$2",
                                 usd_per_person >= 2 & usd_per_person < 4 ~ ">=$2_<$4",
                                 usd_per_person >= 4 & usd_per_person < 6 ~ ">=$4_<$6",
                                 usd_per_person >= 6 & usd_per_person < 8 ~ ">=$6_<$8",
                                 usd_per_person >= 8 & usd_per_person < 10 ~ ">=$8_<$10",
                                 usd_per_person >= 10 & usd_per_person < 12 ~ ">=$10_<$12",
                                 usd_per_person >= 12 & usd_per_person < 14 ~ ">=$12_<$14",
                                 usd_per_person >= 14 & usd_per_person < 16 ~ ">=$14_<$16",
                                 usd_per_person >= 16 & usd_per_person < 18 ~ ">=$16_<$18",
                                 usd_per_person >= 18 & usd_per_person < 20 ~ ">=$18_<$20",
                                 usd_per_person >= 20 ~ ">=$20",
                     TRUE ~ NA_character_), 
         usd_person_bin = fct_relevel(usd_person_bin, c("<$2", ">=$2_<$4", ">=$4_<$6", ">=$6_<$8", ">=$8_<$10",">=$10_<$12", 
                                                  ">=$12_<$14", ">=$14_<$16", ">=$16_<$18", ">=$18_<$20",">=20"))) %>% 
  mutate(location_type = recode(location_type, "village" = "Village"))


fsc3 <- read_excel("C:/Users/seany/Downloads/R/not_for_sharing/2022_FSCMYA_5W_template_Q1 2022_IM Combined_draft_27042022_.xlsx", 
           sheet = "FSC 5W Activities", skip = 4) %>% 
  clean_names() %>%
  filter(!is.na(month_of_implementation)) %>% 
  rename_all(~str_replace_all(., "^number_of_", "")) %>%
  rename_all(~str_replace_all(., "^number_", "")) %>%
  rename(specify_location = specify_location_if_the_the_location_is_not_in_the_list) %>% 
  mutate(idp_camp_site_name= as.character(idp_camp_site_name)) %>% 
  mutate(location = case_when(!is.na(idp_camp_site_name) ~ idp_camp_site_name,
                              !is.na(village_ward) ~ village_ward,
                              !is.na(specify_location) ~ specify_location,
                              !is.na(village_tract_town) ~ village_tract_town)) %>%
  mutate(date = my(month_of_implementation)) %>% 
  rename(activity = fsc_main_activity) %>% 
  mutate(township = recode(township, "Putao" = "Puta-O"), 
         admin3_pcode = ifelse(township == "Puta-O", "MMR001014", admin3_pcode)) %>% 
  left_join(pcode4 %>% distinct(township, vt_town, admin3_pcode, admin4_pcode, admin1_pcode), by = 
              c("village_tract_town" = "vt_town", "township" = "township", 
                "admin3_pcode" = "admin3_pcode", "admin1_pcode" = "admin1_pcode")) %>% 
  mutate(total_value_usd = case_when(currency == "MMK" ~ total_value / 1776, 
                                     currency == "USD" ~ total_value)) 
  
  
# think about how you want to use the "new beneficiaries" column 

# figure out a better way to do this -- you need a long table for locations, the current pcode5 df is not sufficient
# left_join(locations %>% select(vt_town, admin4_pcode, admin3_pcode, admin1_pcode, township), 
#             by = c("village_tract_town" = "vt_town", "township" = "township",
#                    "admin3_pcode" = "admin3_pcode", "admin1_pcode" = "admin1_pcode"))
  
# left_join(locations %>% select(admin3_pcode, admin4_pcode, location_code, location), 
#           by = c("admin3_pcode" = "admin3_pcode", "location" = "location")) 
```

### charts for chirine

```{r}
partner_mean_usd_full <- function(tbl, name){

  tbl %>% 
    filter(!is.na(new_beneficiaries) & !is.na(usd_per_hhd)) %>%
    filter(delivery_modality %in% c("CBT/CVA", "Hybrid (In-kind & CBT/CVA)")) %>%
    filter(activity_red == {{name}}) %>%
    mutate(households = ifelse(activity_red == "food distribution", 
                                       beneficiaries, 
                                       households)) %>% 
    group_by(implementing_partner) %>% 
    summarise(total_value_usd = sum(total_value_usd),
              beneficiaries = sum(new_beneficiaries), 
              households = sum(households)) %>% 
    mutate(mean_usd = total_value_usd / households) %>% 
    arrange(desc(beneficiaries)) %>%
    mutate(implementing_partner = fct_reorder(implementing_partner, beneficiaries)) %>% 
    ggplot(aes(x = mean_usd, y = implementing_partner, fill = beneficiaries)) + 
    scale_x_continuous(labels = comma_format(accuracy = 1)) + 
    scale_fill_viridis(option = "mako", direction = -1, begin = 0.2, 
                       labels = number_format(scale = 1 / 1000, suffix = "K", accuracy = 1)) +
    geom_col() +
    geom_text(aes(label = dollar(mean_usd)), size = 2, hjust = "inward") + 
    theme(axis.text.y = element_text(size = 8)) +
  labs(x = "Average USD value of package per transfer", 
       y = "") +
    theme(legend.title = element_text(size = 4),
          legend.text = element_text(size = 4.5), 
          plot.title = element_text(size = 10),
          axis.title.x = element_text(size = 8))
}

fsc2 %>% partner_mean_usd_full("food distribution") +
  labs(title = "Food distributions (per person)") 

ggsave("food_distribution_partners.png", height = 5, width = 8, units = "in", dpi = 300)

fsc2 %>% partner_mean_usd_full("food_cash for work_assets") + 
  labs(title = "Food/cash for work/assets (per hhd)")

ggsave("cfw_ffa.png", height = 5, width = 8, units = "in", dpi = 300)

fsc2 %>% partner_mean_usd_full("multi-purpose cash transfer") +
  labs(title = "Multi-purpose cash transfer (per hhd)") 

ggsave("mutli_purpose_cash.png", height = 5, width = 8, units = "in", dpi = 300)

fsc2 %>% partner_mean_usd_full("IGA and small grants") +
  labs(title = "IGA and small grants (per hhd)") 

ggsave("iga.png", height = 5, width = 8, units = "in", dpi = 300)


  plot_annotation(title = "Cash transfer values of the top implementing partners (by beneficiaries reached)", 
                  subtitle = "Faceted by activity")


```

```{r}
fsc2 %>%  
  filter(implementing_partner == "Action for Green Earth") %>% 
  count(reporting_organization)
```


```{r}
fsc %>% summarise(new_beneficiaries = sum(new_beneficiaries, na.rm = TRUE))

fsc2 %>%  filter(new_beneficiaries == 2905)

fsc3 %>%
  mutate(drop = case_when(admin4_pcode == "MMR007008058" ~ 1, TRUE ~ 0)) %>% 
  filter(drop != 1) %>% select(-drop)%>% summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE))
  
fsc3 %>% filter(admin4_pcode == "MMR007008058")

fsc3 %>% summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE))

fsc3 %>%  filter(admin4_pcode != "MMR007008058") %>% summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE))
```

### Partner codes

```{r}


# remember that you changed Best Shelter to 8788, remember to change it to the correct code after OCHA makes the correction 
fsc %>% 
  mutate(implementing_partner = 
           recode(implementing_partner,
                  "AVSI" = "Association of Volunteers in International Service",
                  "Community Empowerment and Resilience Association (CERA)" =
                   "Community Empowerment and Resilience Association",
                  "Health Poverty Action (HPA)" = "Health Poverty Action",
                  "Da-Nu National Affairs organization (DNAO)" = "Da-Nu National Affairs organization",
                  "Helvetas" = "HELVETAS Swiss Intercooperation",
                  "Mangrove Service Network (MSN)" = "Mangrove Service Network",
                  "MRCS" = "Myanmar Red Cross Society",
                  "Open Data Myanmar (ODM)" = "Open Data Myanmar", 
                  "Save the Children" = "Save the Children International",
                  "Single Touch Point Company Limited (STP)" = "Single Touch Point Company Limited",
                  "UNDP" = "United Nations Development Programme", 
                  "Urban Strength (US)" = "Urban Strength",
                  "WFP" = "World Food Programme",
                  "World Vision Myanmar" = "World Vision International", 
                  "Wunpawng Ninghtoi (WPN)" = "Wunpawng Ninghtoi",
                  "ZigWay" = "Zigway")) %>% 
  left_join(codes %>% select(partner_name, org_code), by = c("implementing_partner" = "partner_name")) %>%
  mutate(org_code = case_when(implementing_partner == "org_9566" ~ "org_9566", 
                              implementing_partner == "Best Shelter" ~ "org_8788", 
                              TRUE ~ org_code)) %>% 
  mutate(reporting_organization = ifelse(is.na(reporting_organization), implementing_partner, reporting_organization)) %>% 
  mutate(reporting_organization = 
           recode(reporting_organization,
                  "AVSI" = "Association of Volunteers in International Service",
                  "CARE International" = "Care International", 
                  "FAO" = "Food and Agriculture Organization", 
                  "People in Need (PIN)" = "People in Need", 
                  "UNDP" = "United Nations Development Programme",
                  "WFP" = "World Food Programme")) %>%
  left_join(codes %>% select(partner_name, report_org_code = org_code), 
            by = c("reporting_organization" = "partner_name")) %>% 
  mutate(report_org_code = ifelse(reporting_organization == "org_9566", "org_9566", report_org_code)) %>% 
   # count(reporting_organization, report_org_code)
  count(implementing_partner, org_code) 
  
```

# write_csv 

### this is for the 2021 5Ws

I think you need to make a table and give it to Aung. 

```{r}

read_csv("C:/Users/seany/Downloads/R/fsc_5ws_first_quarter_2022/fsc5w_2021.csv") %>% 
  mutate(implementing_partners = 
           recode(implementing_partners,
                  "AVSI" = "Association of Volunteers in International Service",
                  "Community Empowerment and Resilience Association (CERA)" =
                   "Community Empowerment and Resilience Association",
                  "Health Poverty Action (HPA)" = "Health Poverty Action",
                  "Da-Nu National Affairs organization (DNAO)" = "Da-Nu National Affairs organization",
                  "Helvetas" = "HELVETAS Swiss Intercooperation",
                  "Mangrove Service Network (MSN)" = "Mangrove Service Network",
                  "MRCS" = "Myanmar Red Cross Society",
                  "Open Data Myanmar (ODM)" = "Open Data Myanmar", 
                  "Save the Children" = "Save the Children International",
                  "Single Touch Point Company Limited (STP)" = "Single Touch Point Company Limited",
                  "UNDP" = "United Nations Development Programme", 
                  "Urban Strength (US)" = "Urban Strength",
                  "WFP" = "World Food Programme",
                  "World Vision Myanmar" = "World Vision International", 
                  "Wunpawng Ninghtoi (WPN)" = "Wunpawng Ninghtoi",
                  "ZigWay" = "Zigway", 
                  "Center for Social Integrity (CSI)" = "Center for Social Integrity", 
                  "ACTED" = "Agency for Technical Cooperation and Development", 
                  "Dai Fin Social Services (Daifin)" = "Dai Fin Social Services", 
                  "Ethinic Equality Initiative (EEI)" = "Ethinic Equality Initiative",
                  "Karen Youth Network (KYN)" = "Karen Youth Network",
                  "KyWO" = "Kayan Women's Organization", 
                  "People in Need (PIN)" = "People in Need", 
                  "Première Urgence Internationale (PUI)" = "Premiere Urgence Internationale", 
                  "Ray of Lights" = "Rays of Light",
                  "Serve the World" = "Serve The World", 
                  "Shan State Youth Capacity Building Centre (SSYCBC)" = "Shan State Youth Capacity Building Centre",
                  "Solidarités International" = "Solidarites International" 
                  )) %>%
  left_join(codes %>% select(partner_name, org_code), by = c("implementing_partners" = "partner_name")) %>%
  mutate(org_code = case_when(implementing_partners == "org_9566" ~ "org_9566", 
                              implementing_partners == "Best Shelter" ~ "org_8788", 
                              implementing_partners == "Dai Fin Social Services (Daifin)" ~ "org_6203", 
                              is.na(org_code) ~ "org_6203",
                              TRUE ~ org_code)) %>% 
  mutate(reporting_organization = ifelse(is.na(reporting_organization), implementing_partners, reporting_organization)) %>% 
  mutate(reporting_organization = 
           recode(reporting_organization,
                  "AVSI" = "Association of Volunteers in International Service",
                  "CARE International" = "Care International", 
                  "FAO" = "Food and Agriculture Organization", 
                  "People in Need (PIN)" = "People in Need", 
                  "UNDP" = "United Nations Development Programme",
                  "WFP" = "World Food Programme", 
                  "Solidarités International" = "Solidarites International",
                  "Première Urgence Internationale (PUI)" = "Premiere Urgence Internationale",
                  "World Vision Myanmar" = "World Vision International", 
                  "Save the Children" = "Save the Children International",
                  "Oxfam" = "OXFAM International", 
                  "Helvetas" = "HELVETAS Swiss Intercooperation",
                  "Health Poverty Action (HPA)" = "Health Poverty Action",
                  "Center for Social Integrity (CSI)" = "Center for Social Integrity", 
                  "ACTED" = "Agency for Technical Cooperation and Development", 
                  "Cordaid" = "Catholic Organization for Relief and Development Aid"
                  )) %>%
  left_join(codes %>% select(partner_name, report_org_code = org_code), 
            by = c("reporting_organization" = "partner_name")) %>% 
  mutate(report_org_code = ifelse(reporting_organization == "org_9566", "org_9566", report_org_code)) %>%
  select(-reporting_organization, -implementing_partners) %>% 
  write_csv("C:/Users/seany/Downloads/R/fsc_5ws_first_quarter_2022/fsc5w_2021.csv")
 # count(report_org_code, reporting_organization)
  count(implementing_partners, org_code)
```


```{r}
read_excel("2022_FSCMYA_5W_template_Q1 2022_IM Combined_draft_27042022_.xlsx", 
           sheet = "FSC 5W Activities", skip = 4) %>% 
  clean_names() %>% 
  filter(!is.na(month_of_implementation)) %>% 
  mutate(implementing_partner = 
           recode(implementing_partner,
                  "AVSI" = "Association of Volunteers in International Service",
                  "Community Empowerment and Resilience Association (CERA)" =
                    "Community Empowerment and Resilience Association",
                  "Health Poverty Action (HPA)" = "Health Poverty Action",
                  "Da-Nu National Affairs organization (DNAO)" = "Da-Nu National Affairs organization",
                  "Helvetas" = "HELVETAS Swiss Intercooperation",
                  "Mangrove Service Network (MSN)" = "Mangrove Service Network",
                  "MRCS" = "Myanmar Red Cross Society",
                  "Open Data Myanmar (ODM)" = "Open Data Myanmar", 
                  "Save the Children" = "Save the Children International",
                  "Single Touch Point Company Limited (STP)" = "Single Touch Point Company Limited",
                  "UNDP" = "United Nations Development Programme", 
                  "Urban Strength (US)" = "Urban Strength",
                  "WFP" = "World Food Programme",
                  "World Vision Myanmar" = "World Vision International", 
                  "Wunpawng Ninghtoi (WPN)" = "Wunpawng Ninghtoi",
                  "ZigWay" = "Zigway")) %>% 
  left_join(codes %>% select(partner_name, org_code), by = c("implementing_partner" = "partner_name")) %>%
  mutate(org_code = case_when(implementing_partner == "org_9566" ~ "org_9566", 
                              implementing_partner == "Best Shelter" ~ "org_8788", 
                              TRUE ~ org_code)) %>% 
  mutate(reporting_organization = ifelse(is.na(reporting_organization), implementing_partner, reporting_organization)) %>% 
  mutate(reporting_organization = 
           recode(reporting_organization,
                  "AVSI" = "Association of Volunteers in International Service",
                  "CARE International" = "Care International", 
                  "FAO" = "Food and Agriculture Organization", 
                  "People in Need (PIN)" = "People in Need", 
                  "UNDP" = "United Nations Development Programme",
                  "WFP" = "World Food Programme")) %>%
  left_join(codes %>% select(partner_name, report_org_code = org_code), 
            by = c("reporting_organization" = "partner_name")) %>% 
  mutate(report_org_code = ifelse(reporting_organization == "org_9566", "org_9566", report_org_code)) %>%
  select(-implementing_partner, -reporting_organization) %>% 
  write_csv("C:/Users/seany/Downloads/R/fsc_5ws_first_quarter_2022/fsc_codes.csv")

```


```{r}
codes %>% count(partner_name, acronym, org_code)
```


```{r}
skim(fsc)
```


```{r}
fsc %>% summarise(total_value = sum(total_value_usd, na.rm = TRUE))

fsc %>% 
  mutate(value_per_household_usd_new = total_value_usd / reached_households) %>% 
  select(reporting_organization, implementing_partner, 
         activity, value_per_household_usd_new) %>% 
  arrange(desc(value_per_household_usd_new))
  
  ggplot(aes(x = value_per_household_usd_new)) + 
  geom_histogram()

fsc %>% 
  filter(implementing_partner == "Kachin Baptist Convention") %>% 
  select(activity, location, 
         total_value_usd, value_per_household_usd, reached_households) %>% 
  arrange(desc(value_per_household_usd))

```

```{r}
fsc %>% filter(location == "Maga Yang") %>% 
  count(evidence)
  group_by(activity) %>% 
  summarise(new_ben = sum(new_beneficiaries, na.rm = TRUE),
            reached_ben = sum(reached_beneficiaries, na.rm = TRUE))
```


```{r}
fsc %>%  
  group_by(food_insecurity_status) %>% 
  summarise(beneficiaries = sum(reached_beneficiaries)) %>% 
  mutate(pc = beneficiaries / sum(beneficiaries))
```

```{r}
fsc %>% 
  group_by(location, admin4_pcode) %>% 
  slice(which.max(new_beneficiaries)) %>% 
  summarise(unique_beneficiaries = sum(new_beneficiaries))

fsc %>% select(location, admin4_pcode, activity, reached_beneficiaries) %>% 
  arrange(location) %>% 
  filter(location == "AD-2000 Tharthana Compound")

fsc %>% summarise(new_ben = sum(new_beneficiaries, na.rm = TRUE),
                  reached_ben = sum(reached_beneficiaries, na.rm = TRUE))

fsc %>% select(reporting_organization, admin4_pcode, location, 
               activity, new_beneficiaries, reached_beneficiaries) %>% 
  mutate(diff = reached_beneficiaries - new_beneficiaries) %>% 
  filter(diff == 0)

fsc %>% filter(location == "Am Laung") %>% 
  group_by(activity, date) %>% 
  summarise(new_ben = sum(new_beneficiaries, na.rm = TRUE),
                  reached_ben = sum(reached_beneficiaries, na.rm = TRUE))
```

```{r}
fsc %>% 
  group_by(location, admin4_pcode) %>% 
  slice(which.max(new_beneficiaries)) %>% 
  summarise(unique_beneficiaries = sum(new_beneficiaries))
```


```{r}
fsc %>% count(unit, delivery_modality)

fsc %>% filter(unit == "Trainings") %>% 
  count(implementing_partner)

fsc %>% count(location, sort = TRUE)

fsc %>% filter(is.na(unit)) %>% count(activity, cash_delivery_mechanism)


```

```{r}
# Puta-O needs to be fixed - serve the world
fsc %>% filter(is.na(admin3_pcode))

# reporting organisation -- DRC, check with them if it's really not possible to provide vilalge tract.
# they were able to provide the specific location for all of their activities, so it's strange that they cant provide vt
fsc %>% filter(is.na(village_tract_town) & is.na(idp_camp_site_name))

fsc %>% count(food_insecurity_status)

# check with these organisations whether or not they provided their activities to food secure persons 
# they were able to provide evidence for these activities after all 
fsc %>% filter(food_insecurity_status == "Food secure") %>% 
  count(implementing_partner, activity, evidence) %>% 
  head(1) %>% pull(evidence)
```


```{r}
fsc %>% count(implementing_partner)

fsc %>% filter(implementing_partner == "Karuna Mission Social Solidarity") %>% 
  count(location, activity)


```

```{r}
fsc %>% glimpse()
```

```{r}

sum_ben <- function(df, column_var){
  
  column_var <- enquo(column_var)
  
  df %>%
    group_by(!!column_var) %>% # must add bang-bang
    summarise(beneficiaries = sum(reached_beneficiaries, na.rm = TRUE)) %>% 
    arrange(desc(beneficiaries))
    
}

fsc %>% sum_ben(beneficiary_type)

fsc %>% count(frequency)

fsc %>% filter(frequency == "Monthly") %>% 
  select(location, activity,date, reached_beneficiaries) %>% 
  count(location, sort = TRUE)


fsc %>% filter(location == "Lel Pyin Kyay") %>% 
  select(date, activity, activity_description, new_beneficiaries, reached_beneficiaries)
```

```{r}
fsc %>% 
  filter(humanitarian_or_development == "Humanitarian") %>% 
  select(child_male:elderly_female, reached_beneficiaries, new_beneficiaries, strat_obj) %>%
  replace_na(list(child_male = 0, child_female = 0, adult_male = 0,  adult_female = 0,
           elderly_male = 0, elderly_female = 0)) %>% 
  mutate(sum_disagg = child_male + child_female + adult_male + adult_female +
           elderly_male + elderly_female, 
         diff = reached_beneficiaries - sum_disagg) %>% 
  arrange(desc(diff)) %>% 
  group_by(strat_obj) %>% 
  summarise_at(vars(child_male:elderly_female), ~sum(., na.rm = TRUE)) %>% 
  mutate(male = child_male + adult_male + elderly_male, 
         female = child_female + adult_female + elderly_female, 
         child = child_male + child_female, 
         adult = adult_male + adult_female, 
         elderly = elderly_male + elderly_female) %>% 
  mutate_at(vars(male:elderly), ~case_when(strat_obj == "so_1" ~ . * 0.4931810,
                                           strat_obj == "so_2" ~ . * 0.8458814,
                                           strat_obj == "so_3" ~ . * 0.9686332))


fsc %>% summarise(child_male = sum(child_male, na.rm = TRUE))

fsc %>%  
  filter(humanitarian_or_development == "Humanitarian") %>% 
  group_by(strat_obj) %>% 
  summarise(beneficiaries = sum(new_beneficiaries)) %>% 
  adorn_totals("row")
  
fsc %>% group_by(strat_obj) %>% 
  summarise(new_ben = sum(new_beneficiaries, na.rm = TRUE),
            reached_ben = sum(reached_beneficiaries, na.rm = TRUE)) %>% 
  mutate(pc = new_ben / reached_ben)
```

### checking implementing partner

```{r}
fsc2 %>% 
  filter(!is.na(new_beneficiaries) & !is.na(usd_per_hhd)) %>% 
  filter(delivery_modality %in% c("CBT/CVA", "Hybrid (In-kind & CBT/CVA)")) %>%
  # filter(activity %out% c("Provide fishery kits", "Provide livestock kits")) %>% 
  # filter(new_value_hhd < 700 & activity != "Provide monthly food baskets") %>% 
  group_by(activity = activity_red, implementing_partner) %>% 
  summarise(mean_usd = mean(usd_per_hhd), 
            beneficiaries = sum(new_beneficiaries), 
            households = sum(reached_households)) %>% 
  arrange(desc(beneficiaries)) %>% 
  mutate(mean_usd = ifelse(activity == "Provide monthly cash-based transfers", 
                           mean_usd / (beneficiaries / households), 
                           mean_usd	)) %>% 
  top_n(5) %>% 
  ggplot(aes(x = mean_usd, y = implementing_partner, fill = beneficiaries)) +
  scale_x_continuous(labels = comma_format(accuracy = 1)) +
  scale_fill_viridis(option = "mako", direction = -1) + 
  geom_col() + 
  facet_wrap(~ activity, scales = "free", ncol = 2) +
  theme(legend.position = "none", 
        axis.text.y = element_text(size = 7)) +
  labs(x = "Average USD value of package per transfer", 
       y = "Implementing partner code", 
       title = "Top 5 partners (by beneficiaries) and their packages by activity type", 
       subtitle = "Only includes activities reported under cash, hybrid and voucher modalities;\nAll values are per month per household, except cash transfers which are per person")
```

